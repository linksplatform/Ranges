name: CD

on:
  push:
    branches: master
  pull_request:
    branches: master

env:
  NUGETTOKEN: ${{ secrets.NUGET_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/master/MultiProjectRepository

jobs:
  testCpp:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Install Clang 11
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "11.0"
    - name: Conan install
      run: pip install conan
    - name: Conan setup
      run: |
        conan profile new linksplatform --detect
        conan profile update settings.compiler=clang linksplatform
        conan profile update settings.compiler.version=11 linksplatform
        conan profile update settings.compiler.libcxx=libstdc++11 linksplatform
        conan profile show linksplatform
    - name: Conan install packages
      run: |
        git clone https://github.com/linksplatform/conan-center-index
        cd conan-center-index
        git checkout only-development
        cd recipes
        export CC=clang
        export CXX=clang++
        conan create platform.interfaces/all platform.interfaces/0.1.2@ -pr=linksplatform
        conan create platform.exceptions/all platform.exceptions/0.2.0@ -pr=linksplatform
        conan create platform.delegates/all platform.delegates/0.1.3@ -pr=linksplatform
        conan create platform.hashing/all platform.hashing/0.2.0@ -pr=linksplatform
        conan create platform.equality/all platform.equality/0.0.1@ -pr=linksplatform
        conan create platform.converters/all platform.converters/0.1.0@ -pr=linksplatform
    - name: Test C++ and scan-build
      run: |
        export CC=clang
        export CXX=clang++
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        cd cpp
        mkdir $REPOSITORY_NAME && cd $REPOSITORY_NAME
        conan install .. -if=. -pr=linksplatform --build=missing
        cmake .. -DLINKS_PLATFORM_TESTS=TRUE
        scan-build make -j 2
        make -j 2
        cd bin
        binaries=./*
        for bin in $binaries
        do
           ./$bin
        done
        
  testCSharp:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Test ะก#
      run: dotnet test -c Release -f net6
      
  deploy:
    needs: [testCpp, testCSharp]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Generate PDF with CSharp code
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/format-csharp-files.py"
        wget "$SCRIPTS_BASE_URL/format-csharp-document.sh"
        wget "$SCRIPTS_BASE_URL/generate-csharp-pdf.sh"
        bash ./generate-csharp-pdf.sh
    - name: Publish CSharp documentation to gh-pages branch
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/docfx.json"
        wget "$SCRIPTS_BASE_URL/filter.yml"
        wget "$SCRIPTS_BASE_URL/toc.yml"
        wget "$SCRIPTS_BASE_URL/publish-csharp-docs.sh"
        bash ./publish-csharp-docs.sh
    - name: Read CSharp project information
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_csharp_package_info.sh"
        bash ./read_csharp_package_info.sh
    - name: Publish CSharp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-csharp-nuget.sh"
        bash ./push-csharp-nuget.sh
    - name: Read Cpp package information
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_cpp_package_info.sh"
        bash ./read_cpp_package_info.sh
    - name: Publish Cpp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-cpp-nuget.sh"
        bash ./push-cpp-nuget.sh
    - name: Publish release
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/publish-release.sh"
        bash ./publish-release.sh

  pushCSharpNuGetToGitHubPackageRegistry:
    needs: [testCSharp, deploy]
    if: github.event_name == 'push'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: nuget/setup-nuget@v1
      - name: Publish CSharp NuGet to GitHub Package Registry
        run: |
          dotnet build -c Release
          dotnet pack -c Release
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/linksplatform/index.json" -UserName linksplatform -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push **/*.nupkg -Source "GitHub" -SkipDuplicate
